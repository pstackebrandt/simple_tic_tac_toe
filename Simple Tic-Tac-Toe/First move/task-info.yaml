type: edu
custom_name: First move!
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            System.out.println("X O X");
            System.out.println("O X O");
            System.out.println("X O X");
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                    correctNext.field[x - 1][y - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/gamestate/GameResult.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * Describes result of a game (e.g. winner or no win possible because data error).
     */
    public class GameResult extends GameResultAbstract {
        public GameResult(GameStateCategory category) {
            this.category = category;
        }

        public GameResult(GameStateCategory category, IGameStateError error) {
            this.category = category;
            this.errors.add(error);
        }
    }
  learner_created: true
- name: src/tictactoe/gamestate/IGameState.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * Describes current state of a game. It is temporary state.
     * It will be changed or extended at every turn of game.
     */
    public interface IGameState {
        String getGameStateLine();

        char[][] getGameStateSquare();

        /**
         * Get character which marks cells of player X in state.
         */
        String getPlayerXStateCharacter();

        /**
         * Get character which marks cells of player O in state.
         */
        String getPlayerOStateCharacter();

        /**
         * Get character which marks empty cells in state.
         */
        String getEmptyCellStateCharacter();
    }
  learner_created: true
- name: src/tictactoe/gamestate/IGameResult.java
  visible: true
  text: |+
    package tictactoe.gamestate;

    import java.util.ArrayList;

    /**
     * Describes result of a game.
     */
    public interface IGameResult {
        GameStateCategory getGameStateCategory();

        void SetGameStateCategory(GameStateCategory category);

        ArrayList<IGameStateError> GetErrors();

        void AddError(IGameStateError error);
    }

  learner_created: true
- name: src/tictactoe/gamestate/IGameStateError.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * Makes game state errors available.
     */
    public interface IGameStateError {

    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Possible players
     */
    public enum Player {
        X, O
    }
  learner_created: true
- name: src/tictactoe/gamestate/GameData.java
  visible: true
  text: |
    package tictactoe.gamestate;

    import tictactoe.Game;

    /**
     * Holds information about the state of a game.
     */
    public class GameData extends GameResultAbstract implements IGameData {

        public GameData(String stateLine, int cellsCount) {
            this.stateLine = stateLine;
            this.cellsCount = cellsCount;
        }

        /**
         * Describes each cell of the play ground. Contains not formatting.
         */
        private final String stateLine;
        private final int cellsCount;

        public int getCellsCount() {
            return cellsCount;
        }

        public int getPlayGroundRowsCount() {
            return 3;
        }

        public int getPlayGroundColumnsCount() {
            return 3;
        }

        public String getGameStateLine() {
            return stateLine;
        }

        public char[][] getGameStateSquare() {
            return Game.getGameStateSquare(this.stateLine, getCellsCount());
        }

        public String getPlayerXStateCharacter() {
            return "X";
        }

        public String getPlayerOStateCharacter() {
            return "O";
        }


        public String getEmptyCellStateCharacter() {
            return "_";
        }

    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import tictactoe.gamestate.*;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Optional;
    import java.util.concurrent.atomic.AtomicInteger;

    import static java.util.Optional.empty;

    /**
     * Tic tac toe game.
     * Rows and columns will be used dynamically to allow a game with
     * different playground dimensions.
     */
    public class Game {
        private final int playGroundRows = 3;
        private final int playGroundColumns = 3;

        final private PlayGround playGround;

        // final static char[] ValidStateChars = {'O', 'X', '_'}; // todo decide which const to use
        private final static String ValidStateCharsString = "OX_";  // todo decide which const to use, rename
        private final IGameData gameData;

        /**
         * @param gameStateLine Describes the game state. Example: "O_OXXO_XX"
         */
        public Game(String gameStateLine) {
            this.gameData = new GameData(
                    cleanGameStateLine(gameStateLine),
                    getCellsCount());

            this.playGround = new PlayGround(this.gameData.getGameStateSquare());
        }

        /**
         * Manage the game.
         */
        public void run() {
            // to be used later
        }

        /**
         * Get count of all cells of this game.
         *
         * @return cells count
         */
        private int getCellsCount() {
            return playGroundRows * playGroundColumns;
        }

        /**
         * Get game state as a 2 dimensional representation.
         *
         * @param state may be invalid.
         * @return game state
         */
        public static char[][] getGameStateSquare(String state, int fieldCount) {
            var resultState = new char[3][3];

            boolean stateValid = Game.isStateLineRepresentableAsSquare(state, fieldCount);

            if (!stateValid) {
                throw new IllegalArgumentException(String.format("Game state '%s' is invalid.", state));
            }

            var stateChars = state.toCharArray();

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    resultState[row][col] = stateChars[row * 3 + col];
                }
            }

            return resultState;
        }

        /**
         * Returns whether state is valid for the game.
         * (Currently we don't check whether count of state chars of both players is valid.)
         *
         * @param state      to be checked.
         * @param fieldCount is expected count of fields of the play ground.
         */
        protected static boolean isStateLineRepresentableAsSquare(String state, int fieldCount) {
            if (state == null) return false;
            if (state.length() != fieldCount) return false;   // must contain 9 valid chars for a 3x3 play field

            // must contain only _, X, O (letter)
            for (String character : state.split("")) {
                if (!ValidStateCharsString.contains(character)) {
                    return false;
                }
            }

            // todo ?? check whether count of state chars of both players is valid.

            return true;
        }

        // unused
        private GameData categorizeGameState(String state, int fieldCount) {

            var result = new GameData(state, fieldCount);
            result.category = GameStateCategory.XWins;
            //result.errors.add(new GameStateError());

            return result;
        }

        /**
         * Prepare state line for validity check.
         *
         * @return state which contains supported characters in uppercase only
         */
        protected static String cleanGameStateLine(final String stateLine) {
            return stateLine.trim()
                    .toUpperCase();
        }

        public String stateToString(char[][] state) {
            var result = new StringBuilder();

            for (int row = 0; row < playGroundRows; row++) {
                for (int col = 0; col < playGroundColumns; col++) {
                    result.append(state[row][col]);
                }
            }

            return result.toString();
        }

        public void printGameStateSquare() {
            System.out.println(this.gameData.getGameStateLine());
        }

        public void printPlayGround() {
            playGround.printPlayGround();
        }

        /**
         * Print result of the game, e.g. winner, stalemate, erroneous state
         */
        public void printGameResult() {
            IGameResult gameResult = getGameResult(this.gameData);

            // check game results
            var stateCategory = gameResult.getGameStateCategory();
            switch (stateCategory) {
                case XWins:
                    System.out.println("X wins");
                    break;
                case OWins:
                    System.out.println("O wins");
                    break;
                case Draw:
                    System.out.println("Draw");
                    break;
                case NotFinished:
                    System.out.println("Game not finished");
                    break;
                case Impossible:
                    System.out.println("Impossible");
                    break;
                case Unknown:
                    System.out.println("Error: Game state shouldn't be Unknown");
                    break;
                default:
                    System.out.println("Error: Unexpected game state category");
            }
        }

        /**
         * Get result of the game, e.g. Who wins, stalemate, error of current state.
         */
        private IGameResult getGameResult(final IGameState gameState) {
            Optional<IGameResult> result;
            // checkCountOfCells // todo later?

            // find invalid states of cell count
            result = invalidatePlayerCellsCount(gameState.getGameStateLine());
            if (result.isPresent()) return result.get();

            // Check win state of game
            result = getWinState(gameState); //x, o, draw, GameNotFinished, erroneous state
            if (result.isPresent()) return result.get();

            return new GameResult(GameStateCategory.Unknown); // is error
        }

        /**
         * Return information about winner, stalemate, game end without winner, erroneous state.
         */
        // todo We don't seem to need an Optional. Remove!
        private Optional<IGameResult> getWinState(IGameState gameState) {
            var gameStateError = checkPlayerCellsCountDifference(gameState);
            if (gameStateError.isPresent()) {
                return Optional.of(new GameResult(GameStateCategory.Impossible,
                        gameStateError.get()
                ));
            }

            // calc winners
            int xWinsCount = getWinLinesCount(gameState, Player.X);
            int oWinsCount = getWinLinesCount(gameState, Player.O);

            if (xWinsCount + oWinsCount > 1) {
                return Optional.of(new GameResult(GameStateCategory.Impossible,
                        new GameStateError(GameStateErrorType.TooManyWinLines,
                                "Too many win lines"))
                );
            }

            if (xWinsCount == 1) {
                return Optional.of(new GameResult(GameStateCategory.XWins));
            }

            if (oWinsCount == 1) {
                return Optional.of(new GameResult(GameStateCategory.OWins));
            }

            final var stateLine = gameState.getGameStateLine();

            // calc ongoing game
            if (!stateLine.contains("_")) {
                return Optional.of(new GameResult(GameStateCategory.Draw));
            } else {
                return Optional.of(new GameResult(GameStateCategory.NotFinished));
            }
        }

        /**
         * Tells how many win lines player got.
         *
         * @return Count of win lines.
         */
        private int getWinLinesCount(IGameState gameState, Player player) {
            var linesCount = new AtomicInteger();

            final String cellChar = player.equals(Player.X) ? gameState.getPlayerXStateCharacter()
                    : gameState.getPlayerOStateCharacter();

            final var workLine = gameState.getGameStateLine().replaceAll(cellChar, "#");

            var winPatterns = new ArrayList<String>();
            winPatterns.add("...###..."); // horizontal lines
            winPatterns.add("###......");
            winPatterns.add("......###");
            winPatterns.add("#..#..#.."); // vertical lines
            winPatterns.add(".#..#..#.");
            winPatterns.add("..#..#..#");
            winPatterns.add("#...#...#"); // diagonal lines
            winPatterns.add("..#.#.#..");

            winPatterns.forEach(pattern -> {
                if (workLine.matches(pattern)) {
                    linesCount.set(linesCount.get() + 1);
                }
            });

            return linesCount.get();
        }

        /**
         * Tell whether cells count of the player is wrong.
         *
         * @return empty if no error found
         */
        private Optional<IGameStateError> checkPlayerCellsCountDifference(IGameState gameState) {
            int xCells = countPlayerCells(Player.X, gameState.getGameStateLine());
            int oCells = countPlayerCells(Player.O, gameState.getGameStateLine());

            if (Math.abs(xCells - oCells) > 1) {
                GameStateError error;
                if (xCells > oCells) {
                    error = new GameStateError(GameStateErrorType.TOO_MANY_X_CELLS,
                            "Too many x cells");
                } else {
                    error = new GameStateError(GameStateErrorType.TOO_MANY_O_CELLS,
                            "Too many o cells");
                }
                return Optional.of(error);
            }

            return Optional.empty();
        }

        /**
         * Checks whether cells of each player have incorrect count.
         *
         * @return Optional.Empty: no error in relation to cells found, GameResult: Cell count is wrong.
         * ({@link GameStateCategory} is additionally set to GameStateCategory.Impossible.)
         */
        private Optional<IGameResult> invalidatePlayerCellsCount(String stateLine) {
            int xCellCount = Game.countPlayerCells(Player.X, stateLine);
            int oCellCount = Game.countPlayerCells(Player.O, stateLine);

            // Wrong player cells difference
            if (Math.abs(xCellCount - oCellCount) > 1) {
                return Optional.of(new GameResult(GameStateCategory.Impossible));
            }
            return empty();
        }

        /**
         * Get count of all cells of a player.
         */
        protected static int countPlayerCells(Player player, String gameStateLine) {
            final var characters = Arrays.stream(gameStateLine.split(""));
            return (int) characters.filter(c -> c.equalsIgnoreCase(player.name())).count();
        }
    }
  learner_created: true
- name: src/tictactoe/gamestate/GameStateErrorType.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * Types of errors which can be found in a game state.
     */
    public enum GameStateErrorType {
        TOO_MANY_X_CELLS,
        TOO_MANY_O_CELLS,
        TooManyXWinLines, // todo unused
        TooManyWinLines,
        TooManyYWinLines, // todo unused
        WrongCellCount, // todo unused
        WrongCharacter // todo unused
    }
  learner_created: true
- name: src/tictactoe/gamestate/IGameSetup.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * Makes setup data of a game available, especially size of playground.
     * This data describes a game AND must be available at game start.
     */
    public interface IGameSetup {
        int getCellsCount();
        int getPlayGroundRowsCount();
        int getPlayGroundColumnsCount();
    }
  learner_created: true
- name: src/tictactoe/gamestate/GameStateCategory.java
  visible: true
  text: |
    package tictactoe.gamestate;

    public enum GameStateCategory {
        XWins,
        OWins,
        Draw,
        NotFinished,
        Impossible,
        Unknown
    }
  learner_created: true
- name: src/tictactoe/gamestate/GameStateError.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * Describes error of a game state.
     */
    public class GameStateError implements IGameStateError {
        private GameStateErrorType type = null;
        private String errorMessage = null;

        public GameStateError(GameStateErrorType type, String errorMessage) {
            this.type = type;
            this.errorMessage = errorMessage;
        }
    }
  learner_created: true
- name: src/tictactoe/gamestate/IGameData.java
  visible: true
  text: |
    package tictactoe.gamestate;

    /**
     * All data which describes the game.
     */
    public interface IGameData extends IGameResult, IGameState, IGameSetup {
    }
  learner_created: true
- name: src/tictactoe/gamestate/GameResultAbstract.java
  visible: true
  text: |
    package tictactoe.gamestate;

    import java.util.ArrayList;

    abstract class GameResultAbstract implements IGameResult {
        public final ArrayList<IGameStateError> errors = new ArrayList<>();
        public GameStateCategory category = GameStateCategory.Unknown;

        public GameStateCategory getGameStateCategory() {
            return this.category;
        }

        /**
         * Change game state category. This category is like a summary
         * of the current game state. Someone who changes this, doesn't change
         * the state of the game but the evaluation of the game state.
         *
         * @param category New game state category.
         */
        // Should we always get the GameStateCategory on the fly? Without saving it?
        public void SetGameStateCategory(GameStateCategory category) {
            if (category != null) {
                this.category = category;
            }
        }

        public ArrayList<IGameStateError> GetErrors() {
            return errors;
        }

        public void AddError(IGameStateError error) {
            if (error != null) {
                this.errors.add(error);
            }
        }
    }
  learner_created: true
- name: test/tictactoe/CountPlayerCellsTest.java
  visible: true
  text: |-
    package tictactoe;

    import junit.framework.TestCase;

    public class CountPlayerCellsTest extends TestCase {

        public void test_should_detect_3_cells_of_player_x() {
            final var stateLine = "_O_X__X_X";
            final var player = Player.X;

            final int result = Game.countPlayerCells(player, stateLine);

            assertEquals(3, result);
        }

        public void test_should_detect_1_cell_of_player_o() {
            final var stateLine = "_O_X__X_X";
            final var player = Player.O;

            final int result = Game.countPlayerCells(player, stateLine);

            assertEquals(1, result);
        }
    }
  learner_created: false
- name: src/tictactoe/PlayGroundPrinter.java
  visible: true
  text: |
    package tictactoe;

    /**
     * PlayGround creates a visual representation of the play ground.
     * It can print the play ground.
     */
    public class PlayGround {
        private final char playerXIcon = 'X'; // todo unused
        private final char playerOIcon = 'O'; // todo unused
        private final char emptyFieldIcon = '_';  // todo unused
        private final char horizontalBorderIcon = '-';
        private final char verticalBorderIcon = '|';
        private final char fieldSeparatorIcon = ' ';
        private final char borderSeparatorIcon = fieldSeparatorIcon;

        /**
         * Count of characters required in each line for border. Includes spaces.
         */
        private final int countOfDecorativeCharsAtVerticalBorders = 4;

        private char[][] gameState;

        /**
         * Constructor, save game state.
         */
        public PlayGround(char[][] gameState) {
            this.gameState = gameState;
        }

        /**
         * Update game state of play ground.
         */
        // todo unused
        public void updateGameState(char[][] gameState) {
            this.gameState = gameState;
        }

        /**
         * Print play ground of current state.
         */
        public void printPlayGround() {
            System.out.println(getPlayGround());
        }

        /**
         * Get formatted play ground.
         *
         * @return formatted play ground, includes line separators
         */
        private String getPlayGround() {
            var result = new StringBuilder();

            result.append(getHorizontalBorderIcon())
                    .append(System.lineSeparator());

            for (int row = 0; row < getRowsCount(); row++) {
                result.append("" + verticalBorderIcon + borderSeparatorIcon);
                for (int col = 0; col < getColsCount(); col++) {

                    // append space as delimiter between field icons
                    if (col != 0) {
                        result.append(fieldSeparatorIcon);
                    }

                    result.append(gameState[row][col]);
                }
                result.append("" + borderSeparatorIcon + verticalBorderIcon)
                        .append(System.lineSeparator());
            }

            result.append(getHorizontalBorderIcon());

            return result.toString();
        }

        private String getHorizontalBorderIcon() {
            return ("" + horizontalBorderIcon).repeat(getHorizontalBorderLength());
        }

        /**
         * A game with 3 horizontal fields requires 9 characters incl. decorative chars.
         * ---------, 4 f: 11
         */
        protected int getHorizontalBorderLength() {
            return countOfDecorativeCharsAtVerticalBorders + 2 * getColsCount() - 1;
        }

        /**
         * Count of game columns.
         */
        public int getColsCount() {
            return gameState != null && gameState[0] != null
                    ? gameState[0].length
                    : 0;
        }

        /**
         * Count of game rows.
         */
        public int getRowsCount() {
            return gameState != null ? gameState.length : 0;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5400#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Can&#39;t find two fields inside output

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    &gt; _XXOO_OX_
    ---------
    | _ X X |
    | O O _ |
    | O X _ |
    ---------
    Game not finished
  time: Sun, 16 Oct 2022 17:10:42 UTC
record: 4
